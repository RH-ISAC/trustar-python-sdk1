####################################################################################
# Sample client script for the TruSTAR public API
# See https://github.com/trustar/public/wiki/TruSTAR-API for full API documentation
####################################################################################

import ConfigParser
import json
import os
import requests
import requests.auth
import sys
import time
import traceback

CONFIG_FILE = "trustar.conf"

# Submit one or more reports from local flat files
SOURCE_REPORT_DIR = "./sample_reports"

class TruStar():
    """ TruSTAR API module """

    def __init__(self):

        config_parser = ConfigParser.RawConfigParser()
        config_parser.read(CONFIG_FILE)

        try:
            self.auth = config_parser.get('trustar', 'auth_endpoint')
            self.base = config_parser.get('trustar', 'api_endpoint')
            self.apikey = config_parser.get('trustar', 'user_api_key')
            self.apisecret = config_parser.get('trustar', 'user_api_secret')
            self.enclaveId = config_parser.get('trustar', 'enclave_id')
        except:
            print "Problem reading config file"
            sys.exit(1)

    def get_token(self):
        """
        Retrieves the OAUTH token generated by your API key and API secret.
        this function has to be called before any API calls can be made
        """
        client_auth = requests.auth.HTTPBasicAuth(self.apikey, self.apisecret)
        post_data = {"grant_type": "client_credentials"}
        resp = requests.post(self.auth, auth=client_auth, data=post_data)
        token_json = resp.json()
        return token_json["access_token"]

    def get_latest_reports(self, access_token):
        """
        Retrieves the latest 10 reports submitted to the TruSTAR community
        """

        headers = {"Authorization": "Bearer " + access_token}
        resp = requests.get(self.base + "/reports/latest", headers=headers)
        print resp.content

    def get_correlated_reports(self, access_token, indicator):
        """
        Retrieves all TruSTAR reports that contain the searched indicator. You can specificy multiple indicators
        separated by commas
        """

        headers = {"Authorization": "Bearer " + access_token}
        payload = {'q': indicator}
        resp = requests.get(self.base + "/reports/correlate", payload, headers=headers)
        print resp.content

    def query_indicator(self, access_token, indicator, limit):
        """
        Finds all reports that contain the indicators and returns correlated indicators from those reports.
        you can specify the limit of indicators returned.
        """

        headers = {"Authorization": "Bearer " + access_token}
        payload = {'q': indicator, 'limit': limit}
        resp = requests.get(self.base + "/indicators", payload, headers=headers)
        print resp.content

    def submit_report(self, access_token, report_body_txt, report_name, enclave=False):
        """
        Wraps supplied text as a JSON-formatted TruSTAR Incident Report and submits it to TruSTAR Station
        By default, this submits to the TruSTAR community. To submit to your enclave, pass in your enclave_id
        """

        distribution_type = 'ENCLAVE' if enclave else 'COMMUNITY'
        headers = {'Authorization': 'Bearer ' + access_token, 'content-Type': 'application/json'}

        payload = {'incidentReport': {
            'title': report_name,
            'reportBody': report_body_txt,
            'distributionType': distribution_type},
            'enclaveId': self.enclaveId}

        print "Submitting report %s to TruSTAR Station..." % report_name
        resp = requests.post(self.base + "/reports/submit", json.dumps(payload), headers=headers, timeout=1)
        return resp.json()

    def process_file(self, file):
        print "Extracting text from file %s" % file
        try:
            txt = open(file, 'r')
            return txt.read()
        except:
            print "Failed to extract text from file %s " % file


def main():
    ts = TruStar()
    token = ts.get_token()

    ts.get_latest_reports(token)

    # replace the indicator value
    # ts.get_correlated_reports(token, "149.202.234.190")

    # replace the indicator value and limit number with your choice.
    # ts.query_indicator(token,"29d5d03dab95cd5d38bd691d5559202816d36417","100")

    # Submit a simple test report
    # ts.submit_report(token, "hello world")

    # process all files in directory
    print "Processing and submitting each source file in %s as a TruSTAR Incident Report" % SOURCE_REPORT_DIR
    for (dirpath, dirnames, filenames) in os.walk(SOURCE_REPORT_DIR):
        for file in filenames:
            print "Processing source file %s " % file
            try:
                path = os.path.join(SOURCE_REPORT_DIR, file)
                report_body_txt = ts.process_file(path)
                # report_body_txt = "test report 1.2.3.4"

                response_json = ts.submit_report(token, report_body_txt, "COMMUNITY: " + file)
                response_json = ts.submit_report(token, report_body_txt, "ENCLAVE: " + file, enclave=True)

                report_id = response_json['reportId']

                print("SUCCESSFULLY SUBMITTED REPORT, TRUSTAR REPORT as Incident Report ID {0}".format(report_id))

                if 'reportIndicators' in response_json:
                    print("Extracted the following indicators: {}".format(response_json['reportIndicators']))
                else:
                    print("No indicators returned from  report id {0}".format(report_id))

                if 'correlatedIndicators' in response_json:
                    print("Extracted the following correlated indicators: {}".format(response_json['correlatedIndicators']))
                else:
                    print("No correlatedIndicators found in report id {0}".format(report_id))
            except:
                print "Problem with file %s, exception: " % file
                traceback.print_exc(file=sys.stdout)
                continue

            time.sleep(2)


if __name__ == '__main__':
    main()
